@page "/"
@page "/login"
@using System.Diagnostics
@using AXProductApp.Interfaces
@using AXProductApp.Models
@using AXProductApp.Route

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject NavigationManager Navigation
<style>
    body {
        background-repeat: no-repeat;
        background-attachment: fixed;
        font-family: 'Trebuchet MS', sans-serif;
        background-image: linear-gradient(-135deg, rgba(163, 197, 237, 1) 0%, rgba(137, 159, 240, 1) 50%, rgba(199, 156, 232, 1) 100%);
    }
</style>

<EditForm Model="@userModel" OnValidSubmit="Submit" class="section__login">
    <DataAnnotationsValidator/>
    <h1 class="title">Login</h1>
    <div class="section__loging-box">
        <div class="form-group">
            <label class="label-name">Email</label>
            <input placeholder="Enter email" type="email" @bind-value="userModel.Email" class="form-control" required>
            <ValidationMessage For="@(() => userModel.Email)"/>
        </div>
        <div class="mt-2 form-group">
            <label class="label-name">Password</label>
            <input placeholder="Enter password" type="password" @bind-value="userModel.Password" class="form-control" required>
            <ValidationMessage For="@(() => userModel.Password)"/>
        </div>
    </div>
    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="registration">
            <span class="span-text"> Click here to create a new account? </span>
        </NavLink>
    </div>
    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Sign In
        </button>
    </div>
</EditForm>

@code {
    private readonly UserLoginModel userModel = new();
    private string _spinnerClass = "";
    private bool _isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        var isAutoLogginSucess = await AuthService.TryUserAutoLoggingAsync();
        if (isAutoLogginSucess)
            NavigationManager.NavigateTo(Routes.Main);
        else
        {
            SecureStorage.RemoveAll();
            NavigationManager.NavigateTo(Routes.Login);
        }
    }
    private async Task Submit()
    {
        if (_isSubmitting)
            return;
        _isSubmitting = true;
        _spinnerClass = "spinner-border spinner-border-sm";
        var isUserAuthenticated = await AuthService.TryLoginUser(userModel);
        if (isUserAuthenticated)
            Navigation.NavigateTo(Routes.Main);
        else
        {
            Vibration.Default.Vibrate(3000);
            await Application.Current.MainPage.DisplayAlert("Oops", "Incorrect email or password", "O shit,here we go againg");
        }

        _spinnerClass = "";
        _isSubmitting = false;
        Debug.WriteLine(userModel.Email);
    }

}