@page "/"
@page "/login"
@using AXProductApp.Models
@using AXProductApp.Services
@using AXProductApp.Interfaces
@using System.Diagnostics
@using Newtonsoft.Json;
@using System.IdentityModel.Tokens.Jwt;
@inject NavigationManager NavigationManager
@inject ILoginService LoginService
@inject NavigationManager Navigation

<h3>Login</h3>
<EditForm Model="@userModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div>
        <div class="form-group">
            <label>Email address</label>
            <input type="email" @bind-value="userModel.Email" class="form-control" placeholder="Enter email" required>
            <ValidationMessage For="@(() => userModel.Email)" />
        </div>
        <div class="mt-2 form-group">
            <label>Password</label>
            <input type="password" @bind-value="userModel.Password" class="form-control" placeholder="Password" required>
            <ValidationMessage For="@(() => userModel.Password)" />
        </div>
    </div>
    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="registration">
            <span> Click here to create a new account? </span>
        </NavLink>
    </div>
    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Sign In
        </button>
    </div>
</EditForm>

@code {
    private UserLoginModel userModel = new UserLoginModel();
    private string _spinnerClass = "";
    private bool _isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        var userStr = await SecureStorage.GetAsync(nameof(UserDetail));

        if (!string.IsNullOrWhiteSpace(userStr))
        {
            var user = JsonConvert.DeserializeObject<UserDetail>(userStr);

            var handler = new JwtSecurityTokenHandler();

            var jwtToken = handler.ReadToken(user.Token) as JwtSecurityToken;

            if (jwtToken.ValidTo > DateTime.UtcNow)
            {
                NavigationManager.NavigateTo("/main");
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }

        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }

    }

    private async Task Submit()
    {
        if (_isSubmitting)
            return;

        _isSubmitting = true;
        _spinnerClass = "spinner-border spinner-border-sm";

        var response = await LoginService.AuthenticateUser(userModel);

        if (!string.IsNullOrEmpty(response))
        {
            Navigation.NavigateTo("/main");


        }
        else
        {
            // Show an error message
            await App.Current.MainPage.DisplayAlert("Oops", "Incorrect email or password", "Ok");
        }

        _spinnerClass = "";
        _isSubmitting = false;
        Debug.WriteLine(userModel.Email);
    }
}
