@page "/registration"
@using AXProductApp.Models
@using System.Diagnostics
@using AXProductApp.Services;
@using AXProductApp.Interfaces;
@inject IRegisterService RegisterService
@inject NavigationManager Navigation

<style>
    body {
        background-repeat: no-repeat;
        background-attachment: fixed;
        font-family: 'Trebuchet MS', sans-serif;
        background-image: linear-gradient(-135deg, #F7F7F8 0%,#3795BD 50%, #4E31AA 75%, #3A1078 100%);
    }
</style>

<EditForm Model="@userRegister" OnValidSubmit="Submit" class="section__register">
    <DataAnnotationsValidator />
    <h1>Register</h1>
    <div class="section__register-box">
        <div class="form-group">
            <label>First Name</label>
            <input class="form-control" @bind-value="userRegister.FirstName" placeholder="Enter First Name">
            <ValidationMessage For="@(() => userRegister.FirstName)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <input class="form-control" @bind-value="userRegister.LastName" placeholder="Enter Last Name">
            <ValidationMessage For="@(() => userRegister.LastName)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Email</label>
            <input class="form-control" @bind-value="userRegister.Email" type="email" placeholder="Enter Email Adress">
        <ValidationMessage For="@(() => userRegister.Email)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Password</label>
            <input class="form-control" @bind-value="userRegister.Password" type="password" placeholder="Password">
        <ValidationMessage For="@(() => userRegister.Password)"></ValidationMessage>
        </div>
    </div>
    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="login">
            <span class="back-to-login"> <span class="arrow-to-login"> ← </span> Back to login </span>
        </NavLink>
    </div>
    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit"> 
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Sign Up
        </button>
    </div>
</EditForm>

@code {
    UserRegisterModel userRegister = new UserRegisterModel();
    private string _spinnerClass = "";
    private bool _isSubmitting = false;
    private async Task Submit()
    {
        if (_isSubmitting)
            return;

        _isSubmitting = true;
        _spinnerClass = "spinner-border spinner-border-sm";

        var response = await RegisterService.AuthenticateUser(userRegister);

        if (!string.IsNullOrEmpty(response))
        {
            await App.Current.MainPage.DisplayAlert("Congratulations", "Youre accaount have been sucesfully added", "Das is gut");
            Navigation.NavigateTo("/login");
        }
        else
        {
            // Show an error message
            await App.Current.MainPage.DisplayAlert("Oops", "Youre account was not registered ", "Ok");
        }

        _spinnerClass = "";
        _isSubmitting = false;
        Debug.WriteLine(userRegister.Email);
    }

}
