@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using AXProductApp.Data
@inject NavigationManager NavManager
@implements IAsyncDisposable

<h1>SignalR Client</h1>

<div id="status">@strStatus</div>













@code {
    HubConnection? hubConnection;
    private WindowStatus windowStatus;
    string strStatus;
    bool IsConnected;

    protected override async Task OnInitializedAsync()
    {
        await EstablishConnection();
    }
   

    private async Task EstablishConnection()
    {
         hubConnection = new HubConnectionBuilder()
        // .WithUrl(NavManager.ToAbsoluteUri("/client-hub"))
        .WithUrl(new Uri("https://localhost:7009/client-hub")) // This URL should match your SignalR hub endpoint
        .WithAutomaticReconnect()
            .Build();

        // hubConnection.On<WindowStatus>("ReceiveWindowStatus", OnReceiveWindowStatus);
        hubConnection.On<WindowStatus>("ReceiveWindowStatus", (status) =>
        {
            strStatus = $"Window Temp: {status.Temparature}, {status.WaterLevel}, {status.IsProtected}, {status.Humidity}";
            InvokeAsync(StateHasChanged);
        });
        try
        {
            await hubConnection.StartAsync();

            Console.WriteLine($"STATE: {hubConnection?.State}");
            if (hubConnection?.State == HubConnectionState.Connected)
            {
             bool IsConnected = true;
               }
            Console.WriteLine($"REMOTE STATE {IsConnected}");
            Console.WriteLine("Connection to hub established.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error establishing connection to hub: {ex.Message}");
        }
       
    }
   
    private void OnReceiveWindowStatus(WindowStatus status)
    {
         strStatus = $"Window Temp: {status.Temparature}, {status.WaterLevel}, {status.IsProtected}, {status.Humidity}";
        Console.WriteLine(strStatus);
    }
  

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
