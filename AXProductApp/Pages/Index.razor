@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using AXProductApp.Data
@using System.Diagnostics
@inject SendUserInputService SendUserInputService
@inject SignalRService SignalRService

<style class="body-style">
        body {
            background-image: linear-gradient(-135deg, rgba(163, 197, 237, 1) 0%, rgba(137, 159, 240, 1) 50%, rgba(199, 156, 232, 1) 100%);
            background-size: auto;
            background-repeat: no-repeat;
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Trebuchet MS', sans-serif;
            font-size: 18px;
            font-weight: 600;
        }
    </style>
    <div class="body">


        <div class="container">

            <div class="data">Data</div>
            <div class="connectstatus">@LastConnect</div>
            <div class="common-box-styles box-1">
                <div class="icon-1">
                    <img src="/icons/temperature-three-quarters-solid.png" alt="Thermonetr">
                </div>
                <i class="fas fa-thermometer"></i>
                Temperature
                <div class="gray_box">
                    @Temperature
                </div>
            </div>

            <div class="common-box-styles box-1">
                <div class="icon-2">
                    <img src="/icons/humidity-solid.png" alt="Thermonetr">
                </div>                
                <i class="fas fa-tint"></i>
                Humidity
                <div class="gray_box">
                    @Humidity
                </div>
            </div>

            <div class="common-box-styles box-1">
                <div class="icon-3">
                    <img src="/icons/rain-2-solid.png" alt="Thermonetr">
                </div>
                <i class="fas fa-wind"></i>
                Rain
                <div class="gray_box">
                    @isRain
                </div>
            </div>

            <div class="common-box-styles box-2">
                <p>Turn on alarm?
                    <label class="switch-box-2">
                    <input type="checkbox" class="checkbox" @onchange="async eventArgs => {await OnProtectedInput(eventArgs.Value); }">
                        <span class="slider-2">
                            <span class="slider-handle"></span>
                        </span>
                    </label>
                </p>

                <div class="marquee-infinite">
                    <div>
                        <h1>secured by MINOS Group </h1>
                        <h1>\ </h1>
                        <h1>secured by MINOS Group </h1>
                        <h1>\ </h1>
                        <h1>secured by MINOS Group </h1>
                        <h1>\ </h1>
                        <h1>secured by MINOS Group </h1>
                        <h1>\ </h1>
                        <h1>secured by MINOS Group </h1>з
                        <h1>\ </h1>
                    </div>
                </div>
            </div>
            <div class="common-box-styles box-3">
                <div class="button r" id="button-1">
                <input type="checkbox" class="checkbox" @onchange="async eventArgs => {await OnOpenInput(eventArgs.Value); }" />
                    <div class="knobs"></div>
                    <div class="layer"></div>
                </div>
            </div>
    
        </div>
    </div>
@if (NoDataAndConnection)
{
    <ModalWindow Title="Error" Message="No connection" Button="Restart"></ModalWindow>
}


@code {
    private string Temperature, ProtectionStatus, Humidity, LastConnect;
    private bool isRain;
    bool NoDataAndConnection = false;

    protected override async Task OnInitializedAsync()
    {
        SignalRService.DataReceived += OnDataReceived;
        await SignalRService.InitializeConnection();
        NoDataAndConnection = SignalRService.NoDataAndConnection;
    }

    async private Task OnProtectedInput(object checkedValue) => await SendUserInputService.SendProtectedInfo((bool)checkedValue);

    async private Task OnOpenInput(object checkedValue) => await SendUserInputService.SendOpenInfo((bool)checkedValue);

    private async  void OnDataReceived(WindowStatus status)
    {
        Temperature = $"{status.Temparature} °C";
        Humidity = $"{status.Humidity} %";
        ProtectionStatus = status.IsProtected;
        isRain = status.isRain != 0;
        LastConnect = await LastConnectInfo(status);
        await InvokeAsync(StateHasChanged);
    }
    private async Task<string> LastConnectInfo(WindowStatus status)
    {
        string ReturnString;
        TimeSpan TimeDiff = DateTime.Now - status.TimeNow;
        if (TimeDiff.TotalMinutes <= 1)
            ReturnString = "Online";
        else if (TimeDiff.TotalMinutes <= 59 && TimeDiff.TotalMinutes > 1)
            ReturnString = ($"Last connection {TimeDiff.Minutes} minutes ago");
        else if (TimeDiff.TotalHours < 24)
            ReturnString = ($"Last connection {TimeDiff.Hours} hours ago");
        else
            ReturnString = ($"Last connection {TimeDiff.Days} days ago");
        return ReturnString;
    }
}
