@page "/device"
@using Microsoft.AspNetCore.SignalR.Client;
@using AXProductApp.Data;
@using System.Diagnostics;
@using AXProductApp.Pages;
@inject SendUserInputService SendUserInputService;
@inject ReceiveWindowStatusService ReveiveWindowStatus;

<style class="body-style">
    body {
        background-image: linear-gradient(-135deg, rgba(163, 197, 237, 1) 0%, rgba(137, 159, 240, 1) 50%, rgba(199, 156, 232, 1) 100%);
        background-size: auto;
        background-repeat: no-repeat;
        background-attachment: fixed;
        display: flex;
        position: fixed;
        justify-content: center;
        align-items: center;
        font-family: 'Trebuchet MS', sans-serif;
        font-size: 18px;
        font-weight: 600;
    }
</style>

<div class="body">
    <div class="container">

        <div class="data">Data</div>
        <div class="connectstatus">@LastConnect</div>
        <div class="common-box-styles box-1">
            <div class="icon-1">
                <img src="/icons/temperature-three-quarters-solid.png" alt="Thermonetr">
            </div>
            <i class="fas fa-thermometer"></i>
            Temperature
            <div class="gray_box">
                @Temperature
            </div>
        </div>

        <div class="common-box-styles box-1">
            <div class="icon-2">
                <img src="/icons/humidity-solid.png" alt="Thermonetr">
            </div>
            <i class="fas fa-tint"></i>
            Humidity
            <div class="gray_box">
                @Humidity
            </div>
        </div>

        <div class="common-box-styles box-1">
            <div class="icon-3">
                <img src="/icons/rain-2-solid.png" alt="Thermonetr">
            </div>
            <i class="fas fa-wind"></i>
            Rain
            <div class="gray_box">
                @isRain
            </div>
        </div>

        <div class="common-box-styles box-2">
            <p>
                Turn on alarm?
                <label class="switch-box-2">
                    <input type="checkbox" class="checkbox" id="myCheckbox1" onclick="handleCheckboxClick('myCheckbox1')" @bind="isProteced" @oninput="async eventArgs => { await OnProtectedInput(eventArgs.Value); }" />

                    <span class="slider-2">
                        <span class="slider-handle"></span>
                    </span>
                </label>
            </p>

            <div class="marquee-infinite">
                <div>
                    <h1>secured by MINOS Group </h1>
                    <h1>\ </h1>
                    <h1>secured by MINOS Group </h1>
                    <h1>\ </h1>
                    <h1>secured by MINOS Group </h1>
                    <h1>\ </h1>
                    <h1>secured by MINOS Group </h1>
                    <h1>\ </h1>
                    <h1>secured by MINOS Group </h1>з
                    <h1>\ </h1>
                </div>
            </div>
        </div>

        <div class="box-3">
            <label class="switch-box-1">
                <input type="checkbox" class="checkbox" id="myCheckbox2" onclick="handleCheckboxClick('myCheckbox2')" @bind="isOpen" @oninput="async eventArgs => { await OnOpenInput(eventArgs.Value); }" />

                <span class="slider-1">
                    <span class="slider-handle"></span>
                </span>
            </label>
        </div>

        <script>
            let isDisabled1 = false;
            let isDisabled2 = false;

            function handleCheckboxClick(checkboxId) {
                let isDisabled;
                let checkbox;

                if (checkboxId === "myCheckbox1") {
                    isDisabled = isDisabled1;
                    checkbox = document.getElementById("myCheckbox1");
                } else if (checkboxId === "myCheckbox2") {
                    isDisabled = isDisabled2;
                    checkbox = document.getElementById("myCheckbox2");
                }

                if (isDisabled) {
                    return;
                }

                isDisabled = true;
                checkbox.disabled = true;

                console.log("Checkbox clicked, action triggered.");

                setTimeout(() => {
                    if (checkboxId === "myCheckbox1") {
                        isDisabled1 = false;
                    } else if (checkboxId === "myCheckbox2") {
                        isDisabled2 = false;
                    }
                    checkbox.disabled = false;
                }, 3000);
            }
        </script>




    </div>

</div>

@if (isErrorDroped)
{
    <ModalWindow Message=@errorMessage></ModalWindow>
}

<script>
    var startY;
    var pulling = false;

    window.addEventListener('touchstart', function (e) {
        if (window.scrollY === 0) {
            startY = e.touches[0].clientY;
            pulling = true;
        }
    }, { passive: true });

    window.addEventListener('touchmove', function (e) {
        if (pulling) {
            var currentY = e.touches[0].clientY;
            var diffY = currentY - startY;

            if (diffY > 0) {
                e.preventDefault();
            }
        }
    }, { passive: false });

    window.addEventListener('touchend', function (e) {
        if (pulling) {
            var currentY = e.changedTouches[0].clientY;
            var diffY = currentY - startY;

            if (diffY > 50) {
                location.reload();
            }
        }

        startY = null;
        pulling = false;
    }, { passive: true });
</script>


@code {
    private string Temperature, ProtectionStatus, Humidity, LastConnect, errorMessage;
    private bool isRain, isOpen, isProteced, isErrorDroped;

    protected override async Task OnInitializedAsync()
    {
        ReveiveWindowStatus.DataReceived += OnDataReceived;
        SendUserInputService.DataReceived += OnResponceReceived;

        await ReveiveWindowStatus.OnAppUpdate();
        await SendUserInputService.OnAppUpdate();
        // if (ReveiveWindowStatus._hubConnection.State != HubConnectionState.Connected)
        //     await ReveiveWindowStatus.InitializeConnection();
        // if (SendUserInputService._hubConnection.State != HubConnectionState.Connected)
        //     await SendUserInputService.InitiaizeConnection();
    }

    async private Task OnProtectedInput(object checkedValue) => await SendUserInputService.SendProtectedInfo((bool)checkedValue);

    async private Task OnOpenInput(object checkedValue) => await SendUserInputService.SendOpenInfo((bool)checkedValue);

    private async void OnExeptionReceived(string message)
    {
        errorMessage = message;
        isErrorDroped = true;
        await InvokeAsync(StateHasChanged);
        Console.WriteLine(isErrorDroped);
    }
    private async void OnResponceReceived(WindowStatus status)
    {
        isProteced = status.IsProtected.ToBool();
        isOpen = status.IsOpen.ToBool();
        Debug.WriteLine($"IsProtected updated to {isProteced}");
        Debug.WriteLine($"IsOpen updated to {isOpen}");
        await InvokeAsync(StateHasChanged);
    }
    private async void OnDataReceived(WindowStatus status)
    {
        Temperature = $"{status.Temparature} °C";
        Humidity = $"{status.Humidity} %";
        ProtectionStatus = status.IsProtected;
        isRain = status.isRain != 0;
        //this line can do 2 connection to servev but it coused a lag
        // isOpen = status.IsOpen.ToBool();
        LastConnect = status.GetLastConnectInfo();
        await InvokeAsync(StateHasChanged);
    }

}